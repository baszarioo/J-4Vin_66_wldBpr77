package com.cg.games.minesweeper;
import com.cg.engine.cell.*;
import java.util.ArrayList;
import java.util.List;

public class MineSweeper extends Game{ 		//defined class game with game engine incl.
	private static final int SIDE=9			//size of our board
	private GameObject[][] gameField = new GameObject[SIDE][SIDE];
	private int countMinesOnField;
	
	@Override
	public void initialize(){
		setScreenSize(SIDE, SIDE);			//predefined method to set a size of gameboard.
		createGame();
	}
	private void createGame() {
		for (int y=0; y<SIDE; y++){
			for(int x=0;x<SIDE; x++)}
				//int randomNumber = getRandomNumber(10);
				boolean isMine=getRandomNumber(10) <1;
				if(isMine){
					countMinesOnField++;
				}
				gameField[y][x]=new GameObject(x,y, isMine);
				setCellColor(x,y,Color.ORANGE);
			}
		}
		countMineNeighbors();
	}
	private List<GameObject> getNeighbors(GameObject gameObject){
		List<GameObject> result = new ArrayList<>();
		for(int y=gameObjcet.y-1; y<=gameObject.y+1;y++){
			for(int x=gameObject.y-1; x<=gameObject.x+1; x++){
				if(y<0 || y>=SIDE) {
					continue;
				}
				if(x<0 || x>=SIDE) {
					continue;
				}
				if(x==gameObject.x && y==gameObject.y){
					continue;
				}
				result.add(gameField[y][x]);
			}
		}
		return result;
	}
	private void countMineNeighbors() {
		for(int y=0; y<SIDE; y++){
			for(int x=0; x<SIDE; x++){
				GameObject gameObject=gameField[y][x];
				if(!gameObject.isMine) {
					gameObject.countMineNeighbors=Math.toIntExact(getNeighbors(gameObject)
						.stream().filter(neighbor->neighbor.isMine).count());
					}
				}
			}
		}
	}
}

//\ different class /file
public class GameObject {
    private int x;
    private int y;
	public boolean isMine;
	public int countMineNeighbors
    // Constructor
    public GameObject(int x, int y, boolean isMine) {
        this.x = x;
        this.y = y;
		this.isMine=isMine;
    }
}


///// 	dilemmas, /dither	\\\\\\\\
/*private*/ GameObject[][] gameField = new GameObject[height][width];
for (int y = 0; y < height; y++) {
    for (int x = 0; x < width; x++) {
        gameField[y][x] = new GameObject(x, y);
    }
}
/* 	To display all the cells on the screen, you can use the setCellColor(int, int, Color) method of the Game class. This method takes in the cell coordinates and color as parameters. You can call this method for each cell of the matrix and pass in appropriate values for x, y, and Color.ORANGE.

We suggest putting the logic to draw the matrix into a separate createGame() method, which you can then call from the initialize() method. You can use loops to call the setCellColor(int, int, Color) method for each cell of the matrix.	*/

	private void createGame() {
		gameField = new GameObject[SIDE][SIDE];
		for(int y=0; y<SIDE; y++){
			for(int x=0; x<SIDE; x++){
				gameField[y][x]=new GameObject(x,y);
				setSellColor(x,y,Color.ORANGE);
			}
		}
	}

//1stly: private GameObject[][] gameField;


//part5.
public class GameObject {
    private int x;
    private int y;
    private boolean isMine;

    public GameObject(int x, int y) {
        this.x = x;
        this.y = y;
        this.isMine = Game.getRandomNumber(10) == 0;
    }

    public boolean isMine() {
        return isMine;
    }
}
/...\
public class Game {
    // ...
    public static int getRandomNumber(int n) {
        // Implementation of getRandomNumber method
...

//part6666
KLOPIEREN = copy.
To count the number of mined neighbors for each cell in the gameField and assign this value to the appropriate field of the cell, you can create a method that iterates through each cell, checks its neighbors, and counts the number of mined neighbors.
\
private void countMinedNeighbors() {
	for(int y=0; y<SIDE; y++) {
		for(int x=0; x<SIDE; x++){
			if(!gameField[y][x].isMine){ 
				int minedNeighbors=0;
				int[] dx= {-1,-1,-1,0,0,1,1,1};
				int[] dy= {-1,0,1,-1,1,-1,0,1};
				for(int i=0; i<8; i++){
					int newX=x+dx[i];
					int newY=y+dy[i];
					//check if the neighbor coordinates are within bounds.
					if(newX >= 0 && newX < SIDE && newY >= 0 && newY < SIDE) {
						if(gameField[newY][newX].isMine){
							minedNeighbors++;
						}
					}
				}
				gameField[y][x].countMinedNeighbors=minedNeighbors;
			}
		}
	}
}
public class GameObject {
    public int countMineNeighbors; // Add the countMineNeighbors field.
...
public class MineSweeperGame extends Game {
	private static final int SIDE=9;
	...
	@Override
	public void initialize() {
		setScreenSize(SIDE,SIDE);
		createGame();
		countMineNeighbors();
	}
	...
	private void countMineNeighbors() {
		for(int y=0;y<SIDE;y++){
			for(int x=0;x<SIDE;x++){
				if(!gameField[y][x].isMine){
					int minedNeighbors=0;
					List<GameObject> neighbors=getNeighbors(gameField[y][x]);
					for(GameObject neighbor: neighbors){
						if(neighbor.isMine){
							minedNeighbors++;
						}
					}
					gameField[y][x].countMineNeighbors=minedNeighbors;
				}
			}
		}
	}
}
	