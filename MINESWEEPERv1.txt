package com.cg.games.minesweeper;
import com.cg.engine.cell.*;

public class MineSweeper extends Game{ 		//defined class game with game engine incl.
	private static final int SIDE=9			//size of our board
	private GameObject[][] gameField = new GameObject[SIDE][SIDE];
	@Override
	public void initialize(){
		setScreenSize(SIDE, SIDE);			//predefined method to set a size of gameboard.
		createGame();
	}
	private void createGame() {
		for (int y=0; y<SIDE; y++){
			gameField[y][x]=new GameObject(x,y);
			setCellColor(x,y,Color.ORANGE);
			}
		}
	}
}

//\ different class /file
public class GameObject {
    private int x;
    private int y;
    // Constructor
    public GameObject(int x, int y) {
        this.x = x;
        this.y = y;
    }
}


///// 	dilemmas, /dither	\\\\\\\\
/*private*/ GameObject[][] gameField = new GameObject[height][width];
for (int y = 0; y < height; y++) {
    for (int x = 0; x < width; x++) {
        gameField[y][x] = new GameObject(x, y);
    }
}
/* 	To display all the cells on the screen, you can use the setCellColor(int, int, Color) method of the Game class. This method takes in the cell coordinates and color as parameters. You can call this method for each cell of the matrix and pass in appropriate values for x, y, and Color.ORANGE.

We suggest putting the logic to draw the matrix into a separate createGame() method, which you can then call from the initialize() method. You can use loops to call the setCellColor(int, int, Color) method for each cell of the matrix.

Donâ€™t forget to run your program and see what happens! 	*/
	private void createGame() {
		gameField = new GameObject[SIDE][SIDE];
		for(int y=0; y<SIDE; y++){
			for(int x=0; x<SIDE; x++){
				gameField[y][x]=new GameObject(x,y);
				setSellColor(x,y,Color.ORANGE);
			}
		}
	}

//1stly: private GameObject[][] gameField;